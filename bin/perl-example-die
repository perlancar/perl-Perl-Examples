#!perl

use 5.010;
use strict;
use warnings;

sub func1 {
    func2(1, [2, 3], {4=>5});
}

sub func2 {
    func3();
}

sub func3 {
    func4(1, ["some", "arguments", {}]);
}

sub func4 {
    use experimental 'smartmatch';

    my $n = int(rand()*4);
    my @msgtypes = qw(ref strnonl strnl str empty);

    my $str = "Default die message";
    my $msgtype = shift @ARGV // $msgtypes[rand @msgtypes];
    if ($msgtype =~ /^(str):(.*)/) {
        $msgtype = $1;
        $str = $2;
    }
    unless ($msgtype ~~ @msgtypes) {
        die "Unknown message type '$msgtype', please choose from: " .
            join(", ", @msgtypes) . "\n";
    }

    if ($msgtype eq 'strnonl') {
        die "This is a die message without newline ending";
    } elsif ($msgtype eq 'strnl') {
        die "This is a die message with newline ending\n";
    } elsif ($msgtype eq 'str') {
        die $str;
    } elsif ($msgtype eq 'ref') {
        die [{}, "str", undef, [1,2,3]];
    } elsif ($msgtype eq 'empty') {
        die;
    }
}

func1();

#ABSTRACT: This script dies
#PODNAME:

=head1 DESCRIPTION

This script offers several ways of die-ing, which you can choose from
command-line argument:

=over

=item * ref

Die with a message of reference (an arrayref).

=item * empty

die() without any message.

=item * strnonl

Die with a default string message without a newline-ending.

=item * strnl

Die with a default string message with a newline-ending.

=item * str:STR

Die with a string specified in the argument (STR). You can test, e.g. Unicode
characters.

=back

If unspecified, will pick a random way.

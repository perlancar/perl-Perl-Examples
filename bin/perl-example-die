#!perl

use 5.010;
use strict;
use warnings;

use Getopt::Long;

# TODO: allow choosing stack trace depth
# TODO: allow choosing to die inside eval

my %Opts;
GetOptions(
    'msgtype=s' => \$Opts{msgtype},
);

sub func1 {
    func2(1, [2, 3], {4=>5});
}

sub func2 {
    func3();
}

sub func3 {
    func4(1, ["some", "arguments", {}]);
}

sub func4 {
    use experimental 'smartmatch';

    my @msgtypes = qw(ref strnonl strnl str empty);

    my $str = "Default die message";
    my $msgtype = $Opts{msgtype} // $msgtypes[rand @msgtypes];
    if ($msgtype =~ /^(str):(.*)/) {
        $msgtype = $1;
        $str = $2;
    }
    unless ($msgtype ~~ @msgtypes) {
        die "Unknown message type '$msgtype', please choose from: " .
            join(", ", @msgtypes) . "\n";
    }

    if ($msgtype eq 'strnonl') {
        die "This is a die message without newline ending";
    } elsif ($msgtype eq 'strnl') {
        die "This is a die message with newline ending\n";
    } elsif ($msgtype eq 'str') {
        die $str;
    } elsif ($msgtype eq 'ref') {
        die [{}, "str", undef, [1,2,3]];
    } elsif ($msgtype eq 'empty') {
        die;
    }
}

func1();

#ABSTRACT: Several ways of die-ing
#PODNAME:

=head1 OPTIONS

 # random ways of die-ing
 % perl-example-die

 # choose a message string
 % perl-example-die --msgtype "str:foo bar"


=head1 DESCRIPTION

This script offers several ways of die-ing. You can specify the various aspects
via command-line options.


=head1 OPTIONS

=head2 --msgtype=S

Message type.

=over

=item * ref

Die with a message of reference (an arrayref).

=item * empty

die() without any message.

=item * strnonl

Die with a default string message without a newline-ending.

=item * strnl

Die with a default string message with a newline-ending.

=item * str:STR

Die with a string specified in the argument (STR). You can test, e.g. Unicode
characters.

=back

If unspecified, will pick a random way.
